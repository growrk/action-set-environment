name: Development Workflow

inputs:
  is-install:
    description: 'If the action is install'
    required: false
  globals:
    description: 'The globals variables (install only)'
    required: false
  builder-credentials:
    description: 'The credentials for the builder' # install only
    required: false
  builder-options:
    description: 'The options for the builder' # install only
    required: false
  actor:
    description: 'The actor' # install only
    required: false
  is-build:
    description: 'If the action is build (name of the package)'
    required: false
  pack-requires:
    description: 'The require package (name of the package)'
    required: false
  build-directories:
    description: 'Directories to compress' # build only
    required: false
    default: '.nuxt .output'
  is-deploy:
    description: 'If the action is deploy (name of the package)'
    required: false

runs:
  using: 'composite' # 🧙‍♂️ the magic
  steps:
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: 8
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          .pnpm-store
          node_modules
          packages/**/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
    - name: Cache GRK Package
      uses: actions/cache@v3
      if: github.repository == 'growrk/link'
      with:
        path: |
          packages/grk/dist
        key: ${{ runner.os }}-grk-${{ hashFiles('packages/grk/**') }}
        restore-keys: |
          ${{ runner.os }}-grk-
    - name: Generate Genos Hash
      if: github.repository == 'growrk/genos'
      run: |
        GENOS_HASH=$(find packages/{types,helpers,seeds} -not -path '*/node_modules/*' -type f | sort | xargs sha256sum | sha256sum)
        echo "GENOS_HASH=${GENOS_HASH}" >> $GITHUB_ENV
      shell: bash
    - name: Cache Genos Package
      uses: actions/cache@v3
      if: github.repository == 'growrk/genos'
      with:
        path: |
          packages/types/dist
          packages/helpers/dist
          packages/seeds/dist
        key: ${{ runner.arch }}-genos-${{ env.GENOS_HASH }}
        restore-keys: |
          ${{ runner.arch }}-genos-
    
    # get the current project to build and install dependencies
    - name: Retrieve Project ID
      if: ${{ inputs.is-install == 1 }}
      run: |
        GITHUB_ACTOR="${{ inputs.actor }}"
        BUILDER_OPTIONS='${{ inputs.builder-options }}'
        ENVIRONMENT_ID=$(echo "$BUILDER_OPTIONS" | jq -r ".\"${GITHUB_ACTOR}\"")
        if [ -z "$ENVIRONMENT_ID" ] || [ "$ENVIRONMENT_ID" == "null" ]; then
          echo "Error: Project ID not found for actor ${GITHUB_ACTOR}"
          exit 1
        fi
        echo "ENVIRONMENT_ID=${ENVIRONMENT_ID}" >> $GITHUB_ENV
      shell: bash

    - name: Download Workflow Artifacts
      if: ${{ inputs.is-install != 1 }}
      uses: actions/download-artifact@v3 # 👈 Download artifacts
      with:
        name: workflow-envs
    
    # Get the credentials from the google secret manager
    - name: Prepare the environment
      if: ${{ inputs.is-install == 1 }}
      run: |
        GROWRK_PROJECT_ID=growrk-${ENVIRONMENT_ID}
        echo "GROWRK_PROJECT_ID=${GROWRK_PROJECT_ID}" >> $GITHUB_ENV
      shell: bash
    - name: Setup Google Cloud SDK
      if: ${{ inputs.is-install == 1 }}
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ env.GROWRK_PROJECT_ID }}
    - name: Install Dependencies and Prepare Environment
      if: ${{ inputs.is-install == 1 }}
      run: |
        echo "Preparing the environment"
        echo '${{ inputs.builder-credentials }}' | jq '.' > .key.builder.json
        gcloud auth activate-service-account --key-file=.key.builder.json
        gcloud config set project ${{ env.GROWRK_PROJECT_ID }}
        echo "${{ inputs.globals }}\\n$(gcloud secrets versions access latest --secret='ENVIRONMENT' --project='${{ env.GROWRK_PROJECT_ID }}')" > .env
        echo "$(gcloud secrets versions access latest --secret='SERVICE_ACCOUNT' --project='${{ env.GROWRK_PROJECT_ID }}')" > .key.json
        
        # Install Dependencies
        pnpm install --frozen-lockfile
        
        ## Fix problem with the grk binary only in link repository
        if [ "${{ github.repository }}" == "growrk/link" ]; then
          echo "Fix problem with the grk binary only in link repository"
          # grk build
          pnpm -F @growrk/grk build
          # grk install
          pnpm i
        fi

        # Copy the grk scripts to .growrk/scripts
        mkdir -p .growrk/scripts
        cp -r node_modules/@growrk/grk/scripts/* .growrk/scripts

        # Change permissions of the script to make it executable
        chmod +x .growrk/scripts/*

        # Run growbot install script
        ./.growrk/scripts/growbotInstall.sh
      shell: bash
    - name: Upload Installation Artifacts
      if: ${{ inputs.is-install == 1 }}
      uses: actions/upload-artifact@v3
      with:
        name: workflow-envs
        path: |
          .env
          .npmrcGitlab
          .npmrcGithub
          .key.json
          .firebaserc
          workflow.env

    # Build the package
    - name: Download Build Requirements
      if: ${{ inputs.pack-requires != 0 }}
      uses: actions/download-artifact@v3
      with:
        name: build-${{ inputs.pack-requires }}
    - name: Decompress Build Requirements
      if: ${{ inputs.pack-requires != 0 }}
      run: |
        packName=${{ inputs.pack-requires }}
        initialDir=packages
        uncompressedDir=$initialDir/${packName}/
        
        ## Fix problem with the website repository, it's a regular repository instead of a monorepo
        if [ "${{ github.repository }}" == "growrk/website" ]; then
          initialDir=.
          uncompressedDir=$initialDir/
        fi

        tar -xzvf ${packName}.tar.gz -C $uncompressedDir --strip-components=2
      shell: bash
    - name: Build Package
      if: ${{ inputs.is-build != 0 }}
      run: |
        buildName=${{ inputs.is-build }}
        initialDir=packages
        buildDir=$initialDir/${buildName}

        ## Fix problem with the website repository, it's a regular repository instead of a monorepo
        if [ "${{ github.repository }}" == "growrk/website" ]; then
          initialDir=.
          buildDir=$initialDir
          pnpm build && pnpm generate
        else
          cp .env ${buildDir}/.env
          pnpm -F @growrk/${buildName} build
        fi

        IFS=' ' read -ra DIRS_TO_COMPRESS <<< "${{ inputs.build-directories }}"
        DIRS_STR=""
        for dir in "${DIRS_TO_COMPRESS[@]}"; do
          DIRS_STR+="${buildDir}/$dir "
          if [ "$dir" == ".output" ] && [ "${{ github.repository }}" == "growrk/link" ]; then
            cp .key.json ${buildDir}/$dir/server/keys.json
          fi
        done

        if [ "${{ github.repository }}" == "growrk/website" ]; then
          cp dist/robots.txt dist/sitemap.xml .nuxt/dist
        fi

        tar -czvf ${buildName}.tar.gz $DIRS_STR
      shell: bash
    - name: Upload Build Artifacts
      if: ${{ inputs.is-build != 0 }}
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ inputs.is-build }}
        path: ${{ inputs.is-build }}.tar.gz

    # Deploy the package
    - name: Prepare for Deployment
      if: ${{ inputs.is-deploy == 1 }}
      id: decode
      run: |
        echo "GROWRK_SA_KEY<<EOF" >> $GITHUB_ENV
        echo "$(cat .key.json)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/.key.json" >> $GITHUB_ENV
      shell: bash
    - name: Authenticate for Deployment
      uses: 'google-github-actions/auth@v2'
      if: ${{ inputs.is-deploy == 1 }}
      with:
        credentials_json: ${{ env.GROWRK_SA_KEY }}
    - name: Setup Google Cloud SDK for Deployment
      if: ${{ inputs.is-deploy == 1 }}
      uses: 'google-github-actions/setup-gcloud@v1'
    - name: Deploy Package
      if: ${{ inputs.is-deploy == 1 }}
      run: |
        packName=${{ inputs.pack-requires }}
        source workflow.env
        echo "Bump version"

        ## Fix problem with the website repository, it's a regular repository instead of a monorepo
        if [ "${{ github.repository }}" != "growrk/website" ]; then
          pnpm grk ci:bump $WORKFLOW_VERSION
          cp README.md packages/$packName/
          cp .npmrcGitlab packages/$packName/.npmrc
          cp .env packages/$packName/

          pnpm grk fixes
        fi

        pnpm firebase use $WORKFLOW_ENVIRONMENT
      shell: bash